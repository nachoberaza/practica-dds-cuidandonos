@startuml clases_punto1
class Usuario {
    tipo : TipoUsuario
    nombre: String
    apellido : String
    edad : Integer
    sexo : Sexo
    direccion : Direccion
}

enum Sexo {
    Masculino
    Femenino
    Otro
}

interface TipoUsuario {
    + comenzarViaje(Viaje) : bool
}

class UsuarioPasivo implements TipoUsuario {
    + confirmarCuidado(Viaje) : bool
}

class UsuarioActivo implements TipoUsuario {
    accionAnteIncidente : EstrategiaAnteIncidente

    + seleccionarCuidador(List<UsuarioPasivo>)
    + llegueBien(Viaje)
}

class Viaje{
    ruta: Ruta
    estado : EstadoViaje
    transeunte : Usuario
    cuidador : Usuario
    + comenzar()
    + finalizar()
}

enum EstadoViaje{
    EN_CURSO
    FINALIZADO
}

class Ruta{
    inicio : Direccion
    fin : Direccion
    duracion : Integer
    + calcularDuracion()
}

interface EstrategiaAnteIncidente {
    ejecutarEstrategia()
}

note left of EstrategiaAnteIncidente
    Implementacion del patron
    **Strategy** para que un usuario
    pueda elegir como actuar ante
    un incidente.
end note

class NotificarCuidador{}

class NotificarPolicia{}

class NotificarCelular{}

class Esperar{
    - esperar(minutos : Integer)
}

class Direccion{
    calle : String
    codigoPostal : String
    altura : String
}
Usuario -- Sexo
Usuario *-- TipoUsuario

Usuario o-- Direccion
Usuario o-- Viaje

UsuarioActivo *-- EstrategiaAnteIncidente

Viaje o-- Ruta
Viaje -- EstadoViaje

Ruta o-- Direccion

EstrategiaAnteIncidente <|.. NotificarCuidador
EstrategiaAnteIncidente <|.. NotificarCelular
EstrategiaAnteIncidente <|.. NotificarPolicia
EstrategiaAnteIncidente <|.. Esperar

@enduml