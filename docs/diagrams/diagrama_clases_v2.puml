@startuml clases_punto2
class Usuario{
    tipo : TipoUsuario
    nombre: String
    apellido : String
    edad : Integer
    sexo : Sexo
    direccion : Direccion
}

interface TipoUsuario{
    comenzarViaje(Viaje) : void
}

class UsuarioPasivo implements TipoUsuario {
    - confirmarCuidado(Viaje) : bool
}

class UsuarioActivo implements TipoUsuario {
    accionAnteIncidente : EstrategiaAnteIncidente

    - solicitarAcompa√±amiento() : void
    + solicitarViaje() : Viaje
    + seleccionarCuidador(List<UsuarioPasivo>) : void
    + llegueBien(Viaje) : void
}

enum Sexo{
    Masculino
    Femenino
    Otro
}

class Viaje {
    ruta: Ruta
    estado : EstadoViaje
    cuidador : Usuario
    transeunte : Usuario
    + comenzar() : void
    + finalizar() : void
}

enum EstadoViaje{
    EN_CURSO
    FINALIZADO
}

class Ruta{
    paradas : List<Parada>
    duracion : Integer
    seguimiento : EstrategiaSeguimiento
    estrategiaDuracion : EstrategiaDeCalculoDeDuracion
    + calcularDuracion() : Integer
}

class Parada {
    direccion : Direccion
    tiempoDemora : Integer
}

interface EstrategiaSeguimiento {
    ejecutarSeguimiento(List<Parada>) : void
}

interface EstrategiaDeCalculoDeDuracion {
    calcularDuracion(List<Parada>) : Integer
}

class calculoDemoraPorDefault implements EstrategiaDeCalculoDeDuracion{
    - calcularDuracionAproximada() : Integer
}

class calculoDemoraPorTramo implements EstrategiaDeCalculoDeDuracion {
    - calcularDemoraPorTramo(paradaA : Parada, paradaB : Parada) : Integer
}

class SeguimientoPorNotificacionLlegada implements EstrategiaSeguimiento {
    + notificarLlegada(nroParada : Integer) : void
}

class SeguimientoPorTiempoParada implements EstrategiaSeguimiento {
    - demoraPorTramo(paradaA : Direccion, paradaB : Direccion) : Integer
}

interface EstrategiaAnteIncidente {
    ejecutarEstrategia() : void
}

class NotificarCuidadores{}

class NotificarPolicia{}

class NotificarCelular{}

class Esperar{
    - esperar(minutos : Integer)
}

class Direccion{
    calle : String
    codigoPostal : String
    altura : String
}

'Relaciones'
Usuario o-- Direccion
Usuario -- Sexo
Usuario o-- Viaje

UsuarioActivo *-- EstrategiaAnteIncidente
UsuarioActivo o-- Viaje

Usuario *-- TipoUsuario

Viaje o-- Ruta
Viaje -- EstadoViaje

Ruta o-- Parada
Ruta *-- EstrategiaSeguimiento
Ruta *-- EstrategiaDeCalculoDeDuracion

Parada o-- Direccion

EstrategiaAnteIncidente <|.. NotificarCuidadores
EstrategiaAnteIncidente <|.. NotificarCelular
EstrategiaAnteIncidente <|.. NotificarPolicia
EstrategiaAnteIncidente <|.. Esperar

'Notas'
note left of EstrategiaSeguimiento
    Implementacion del patron
    **Strategy** para que un usuario
    pueda elegir como seguir un viaje.
end note

note left of EstrategiaAnteIncidente
    Implementacion del patron
    **Strategy** para que un usuario
    pueda elegir como actuar ante
    un incidente.
end note

note left of EstrategiaDeCalculoDeDuracion
    Implementacion del patron
    **Strategy** para que una ruta
    pueda calcular su duracion.
end note

@enduml