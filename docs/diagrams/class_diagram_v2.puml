@startuml
class Usuario{
    tipoUsuario : TipoUsuario
    nombre: String
    apellido : String
    edad : Integer
    sexo : Sexo
    direccion : Direccion
    + configurarEstrategiaAnteIncidente(EstrategiaAnteIncidente) : void
}

enum Sexo{
    Masculino
    Femenino
    Otro
}

interface TipoUsuario{
    'TODO: Que metodo podria ir en esta interfaz??'
}

class Transeunte implements TipoUsuario {
    accionAnteIncidente : EstrategiaAnteIncidente

    + generarViaje() : Viaje
    + comenzarViaje(Viaje) : void
    + llegueBien(Viaje) : void
    - solicitarAcompa√±amiento() : void
    - definirCuidador(candidatos : List<Usuario>) : void
    - notificarCuidador() : void
}

class Cuidador implements TipoUsuario {
    + confirmarCuidado(Viaje) : void
    - aceptarCuidado(Viaje) : void
    - rechazarCuidado(Viaje) : void
}

class Viaje {
    ruta: Ruta
    estado : EstadoViaje
    + comenzar() : void
    + finalizar() : void
}

enum EstadoViaje{
    EN_CURSO
    FINALIZADO
}

class Ruta{
    inicio : Direccion
    paradas : List<Parada>
    duracion : Integer
    seguimiento : EstrategiaSeguimiento
    + calcularDuracion() : Integer
}

class Parada {
    direccion : Direccion
    tiempoDemora : Integer
}

interface EstrategiaSeguimiento {
    calcularDemora(List<Parada>)
}

class SeguimientoPorNotificacionLlegada implements EstrategiaSeguimiento {
    + notificarLlegada(nroParada : Integer) : void
}

class SeguimientoPorTiempoParada implements EstrategiaSeguimiento {
    + definirTiempoPorParada() : void
    - demoraPorTramo(paradaA : Direccion, paradaB : Direccion) : Integer
}

interface EstrategiaAnteIncidente {
    ejecutarEstrategia() : void
}

class NotificarCuidadores{}

class NotificarPolicia{}

class NotificarCelular{}

class Esperar{
    - esperar(minutos : Integer)
}

class Direccion{
    calle : String
    codigoPostal : String
    altura : String
}

'Relaciones'
Usuario *-- TipoUsuario
Usuario o-- Direccion
Usuario o-- EstrategiaAnteIncidente
Usuario -- Sexo

Transeunte *-- EstrategiaAnteIncidente

Viaje o-- Ruta
Transeunte o-- Viaje
Cuidador o-- Viaje
Viaje -- EstadoViaje

Ruta o-- Parada
Ruta *-- EstrategiaSeguimiento
Ruta o-- Direccion

EstrategiaAnteIncidente <|.. NotificarCuidador
EstrategiaAnteIncidente <|.. NotificarCelular
EstrategiaAnteIncidente <|.. NotificarPolicia
EstrategiaAnteIncidente <|.. Esperar

'Notas'
note right of EstrategiaSeguimiento
    Implementacion del patron
    **Strategy** para que un usuario
    pueda elegir como seguir un viaje.
end note

note left of TipoUsuario
    Implementacion del patron
    **State** para un usuario
    transeunte o cuidador.
end note

note left of EstrategiaAnteIncidente
    Implementacion del patron
    **Strategy** para que un usuario
    pueda elegir como actuar ante
    un incidente.
end note

@enduml