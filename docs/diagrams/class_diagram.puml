@startuml
class Usuario{
    estado : Estado
    nombre: String
    apellido : String
    edad : Integer
    sexo : Sexo
    direccion : Direccion
    + configurarEstrategiaDeIncidente(EstrategiaAnteIncidente)
}

enum Sexo{
    Masculino
    Femenino
    Otro
}

interface Estado{
    'TODO: Que metodo podria ir en esta interfaz??'
}

note right of Estado
    Implementacion del patron
    **State** para un usuario
    transeunte o cuidador.
end note

class Transeunte {
    accionAnteIncidente : EstrategiaAnteIncidente

    + seleccionarCuidador(List<Usuario>)
    + comenzarViaje() : Viaje
    + llegueBien(Viaje)
}

class Cuidador {
    + confirmarCuidado(Viaje)
    - aceptarCuidado()
    - rechazarCuidado()
}

class Viaje{
    ruta: Ruta
    estado : EstadoViaje
    + comenzar()
    + finalizar()
}

enum EstadoViaje{
    EN_CURSO
    FINALIZADO
}

class Ruta{
    inicio : Direccion
    fin : Direccion
    duracion : Integer
    + calcularDuracionAproximada()
}

interface EstrategiaAnteIncidente {
    ejecutarEstrategia()
}

note left of EstrategiaAnteIncidente
    Implementacion del patron
    **Strategy** para que un usuario
    pueda elegir como actuar ante
    un incidente.
end note

class NotificarCuidador{}

class NotificarPolicia{}

class NotificarCelular{}

'TODO: Checkear si estan bien parametrizados los minutos'
class Esperar{
    - esperar(minutos : Integer)
}

class Direccion{
    calle : String
    codigoPostal : String
    altura : String
}

Usuario *-- Estado
Usuario o-- Direccion
Usuario o-- EstrategiaAnteIncidente
Usuario -- Sexo

Estado <|.. Transeunte
Estado <|.. Cuidador

Transeunte *-- EstrategiaAnteIncidente

Viaje o-- Ruta
Transeunte o-- Viaje
Cuidador o-- Viaje
Viaje -- EstadoViaje

Ruta o-- Direccion

EstrategiaAnteIncidente <|.. NotificarCuidador
EstrategiaAnteIncidente <|.. NotificarCelular
EstrategiaAnteIncidente <|.. NotificarPolicia
EstrategiaAnteIncidente <|.. Esperar

@enduml